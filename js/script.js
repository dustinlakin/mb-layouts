// Generated by CoffeeScript 1.3.3
(function() {
  var Game, Slider, createEvent, drawRaphael, get_event_data,
    _this = this,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  $(document).ready(function() {
    return get_event_data();
  });

  get_event_data = function() {
    return $.ajax({
      url: "http://192.168.1.106:3000/eventResults",
      dataType: "JSONP",
      success: function(data) {
        var ev, _i, _len;
        for (_i = 0, _len = data.length; _i < _len; _i++) {
          ev = data[_i];
          console.log("creating event ", ev);
          createEvent(ev);
        }
        return drawRaphael();
      }
    });
  };

  createEvent = function(data) {
    console.log(data);
    return console.log(new Game(data));
  };

  drawRaphael = function() {
    return $('.back_button').each(function(i) {
      var paper;
      paper = Raphael($(this)[0], 30, 30);
      return paper.path("M21.871,9.814 15.684,16.001 21.871,22.188 18.335,25.725 8.612,16.001 18.335,6.276z").attr({
        fill: "#B4B4B4",
        stroke: "none",
        width: 30,
        height: 30
      });
    });
  };

  Slider = (function() {

    function Slider(settings) {
      this.settings = settings;
      this.update = __bind(this.update, this);

      this.setPercent = __bind(this.setPercent, this);

      this.calculateResult = __bind(this.calculateResult, this);

      this.setOdds = __bind(this.setOdds, this);

      this.touchEnd = __bind(this.touchEnd, this);

      this.touchMoved = __bind(this.touchMoved, this);

      this.touchStarted = __bind(this.touchStarted, this);

      this.setOnChangeCallback = __bind(this.setOnChangeCallback, this);

      this.width = 290;
      this.left = 10;
      this.box = {
        width: 120
      };
      this.current = this.settings.min;
      this.id = this.settings.id;
      this.odds = this.settings.odds;
      this.percent = 0;
      this.setupEvents(this.id);
      this.beingTouched = false;
      this.percent = .5;
      this.update();
    }

    Slider.prototype.setOnChangeCallback = function(onChangeCallback) {
      this.onChangeCallback = onChangeCallback;
    };

    Slider.prototype.setupEvents = function() {
      if (Modernizr.touch) {
        document.getElementById(this.id).ontouchstart = this.touchStarted;
        return document.body.ontouchend = this.touchEnd;
      } else {
        document.getElementById(this.id).onmousedown = this.touchStarted;
        return document.body.onmouseup = this.touchEnd;
      }
    };

    Slider.prototype.touchStarted = function() {
      event.preventDefault();
      if (Modernizr.touch) {
        this.percent = (event.touches[0].pageX - this.left) / this.width;
        document.body.ontouchmove = this.touchMoved;
      } else {
        this.percent = (event.pageX - this.left) / this.width;
        document.body.onmousemove = this.touchMoved;
      }
      this.beingTouched = true;
      return this.update();
    };

    Slider.prototype.touchMoved = function() {
      event.preventDefault();
      if (Modernizr.touch) {
        this.percent = (event.touches[0].pageX - this.left) / this.width;
        document.body.ontouchmove = this.touchMoved;
      } else {
        this.percent = (event.pageX - this.left) / this.width;
        document.body.onmousemove = this.touchMoved;
      }
      return this.update();
    };

    Slider.prototype.touchEnd = function() {
      if (Modernizr.touch) {
        document.body.ontouchmove = null;
      } else {
        document.body.onmousemove = null;
      }
      event.preventDefault();
      return this.beingTouched = false;
    };

    Slider.prototype.setOdds = function(odds) {
      this.odds = odds;
    };

    Slider.prototype.calculateResult = function(amount) {
      var ret;
      if (this.odds > 0) {
        ret = Math.abs(this.odds / 100) * amount;
      }
      if (this.odds < 0) {
        ret = Math.abs(100 / this.odds) * amount;
      }
      return Math.floor(ret);
    };

    Slider.prototype.setPercent = function(percent) {
      this.percent = percent;
    };

    Slider.prototype.update = function() {
      var amountPos, beforeStep, output, pos, roundedAmount;
      pos = Math.ceil(this.percent * this.width);
      if (pos < 0) {
        pos = 0;
      }
      if (pos > this.width) {
        pos = this.width;
      }
      $("#" + this.id).find(".slider_fill").css({
        width: pos
      });
      beforeStep = ((this.settings.max - this.settings.min) * this.percent) + this.settings.min;
      roundedAmount = beforeStep - (beforeStep % this.settings.step);
      if (roundedAmount < this.settings.min) {
        roundedAmount = this.settings.min;
      }
      if (roundedAmount > this.settings.max) {
        roundedAmount = this.settings.max;
      }
      amountPos = pos + this.left - (this.box.width / 2);
      if (amountPos < this.left) {
        amountPos = this.left;
      }
      if (amountPos > this.width - this.box.width + this.left) {
        amountPos = this.width - this.box.width + this.left;
      }
      this.reward = this.calculateResult(roundedAmount);
      output = "$" + roundedAmount + " -> $" + this.reward;
      $("#" + this.id).parent().find(".amount").css({
        left: amountPos
      }).text(output);
      this.current = roundedAmount;
      if (this.onChangeCallback != null) {
        return this.onChangeCallback();
      }
    };

    return Slider;

  })();

  Game = (function() {
    var buildGroups,
      _this = this;

    function Game(data) {
      this.toString = __bind(this.toString, this);

      this.toAmount = __bind(this.toAmount, this);

      this.toGroups = __bind(this.toGroups, this);

      this.toOdds = __bind(this.toOdds, this);

      this.setBetDescription = __bind(this.setBetDescription, this);

      this.selectBet = __bind(this.selectBet, this);

      this.updateBet = __bind(this.updateBet, this);

      this.selectGroup = __bind(this.selectGroup, this);

      this.createGroups = __bind(this.createGroups, this);

      this.getValidGroups = __bind(this.getValidGroups, this);

      this.setupEvents = __bind(this.setupEvents, this);

      this.centerGroupContent = __bind(this.centerGroupContent, this);

      this.centerAmountContent = __bind(this.centerAmountContent, this);

      this.render = __bind(this.render, this);
      this.id = data.id;
      this.date = data.bet_by;
      this.name = data.name;
      this.schedules = data.schedules;
      this.overUnder = data.overUnders;
      this.selectedGroup = null;
      this.selectedBet = null;
      this.render();
      this.setupEvents();
    }

    Game.prototype.render = function() {
      var compiled, temp;
      temp = $("#singleGame").html();
      compiled = _.template(temp);
      $("#container").append(compiled({
        game: this
      }));
      return this.el = $("#game_" + this.id);
    };

    Game.prototype.centerAmountContent = function() {
      var height, newMargin;
      height = this.el.height();
      newMargin = (height - this.el.find(".bet_amount_holder").height()) / 2;
      return this.el.find(".bet_amount_holder").css({
        "margin-top": newMargin
      });
    };

    Game.prototype.centerGroupContent = function() {
      var height, newMargin;
      height = this.el.height();
      newMargin = (height - this.el.find(".groups").height()) / 2;
      return this.el.find(".groups").css({
        "margin-top": newMargin
      });
    };

    Game.prototype.setupEvents = function() {
      var i, line, new_el, ou, sch, spread, team, _i, _j, _len, _len1, _ref, _ref1,
        _this = this;
      _ref = this.schedules;
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        sch = _ref[i];
        if (sch.spread) {
          team = sch.team;
          spread = sch.spread;
          this.el.find("#spread_" + spread.id).on("click", (function(team, spread) {
            return function() {
              return _this.selectBet(team, "spread", spread);
            };
          })(team, spread));
        }
        if (sch.moneyLine) {
          team = sch.team;
          line = sch.moneyLine;
          this.el.find("#line_" + line.id).on("click", (function(team, line) {
            return function() {
              return _this.selectBet(team, "line", line);
            };
          })(team, line));
        }
      }
      _ref1 = this.overUnder;
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        ou = _ref1[_j];
        new_el = ou.over ? this.el.find(".over") : this.el.find(".under");
        new_el.on("click", (function(ou) {
          return function() {
            return _this.selectBet(null, "overUnder", ou);
          };
        })(ou));
      }
      return this.el.find(".back_button").on("click", function() {
        return _this.toOdds();
      });
    };

    Game.prototype.getValidGroups = function() {
      var _this = this;
      this.el.find(".groups_content").html("Loading");
      return $.ajax({
        url: "http://192.168.1.106:3000/getValidGroups",
        data: {
          event: this.id,
          user: 1
        },
        dataType: "JSONP",
        success: function(groups) {
          return _this.createGroups(groups);
        }
      });
    };

    Game.prototype.createGroups = function(groups) {
      var group, i, _i, _len, _ref,
        _this = this;
      this.groups = groups;
      buildGroups(this.el, this.groups);
      _ref = this.groups;
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        group = _ref[i];
        this.el.find("#valid_group_" + group.id).on("click", function() {
          return _this.selectGroup(group.id);
        });
      }
      this.centerGroupContent();
      return this.toGroups();
    };

    buildGroups = function(el, groups) {
      var compiled, temp;
      temp = $("#valid_groups").html();
      compiled = _.template(temp);
      return el.find(".groups_content").html(compiled({
        groups: groups
      }));
    };

    Game.prototype.selectGroup = function(id) {
      var group;
      console.log("group " + id);
      group = _.find(this.groups, function(g) {
        return g.id = id;
      });
      this.selectedGroup = group;
      this.slider = new Slider({
        id: "slider_event_" + this.id,
        max: group.max_bet,
        min: group.min_bet,
        step: 10,
        odds: this.selectedBet.bet.odds
      });
      this.slider.setOnChangeCallback(this.updateBet);
      this.updateBet();
      this.centerAmountContent();
      return this.toAmount();
    };

    Game.prototype.updateBet = function() {
      var team, text;
      team = this.selectedBet.team;
      switch (this.selectedBet.type) {
        case "line":
          text = "" + team.city + " " + team.name + " Win";
          break;
        case "spread":
          if (this.selectedBet.bet.points > 0) {
            text = "" + team.city + " " + team.name + " Win by " + this.selectedBet.bet.points;
          } else {
            text = "" + team.city + " " + team.name + " Win or <br/>Lose by Less than " + this.selectedBet.bet.points;
          }
          break;
        case "overUnder":
          text = "Combined scores are ";
          if (this.selectedBet.bet.over > 0) {
            text += "over " + this.selectedBet.bet.points;
          } else {
            text += "under " + this.selectedBet.bet.points;
          }
      }
      return this.el.find(".bet_description").html(text);
    };

    Game.prototype.selectBet = function(team, type, bet) {
      this.selectedBet = {
        team: team,
        type: type,
        bet: bet
      };
      return this.getValidGroups();
    };

    Game.prototype.setBetDescription = function(current) {};

    Game.prototype.toOdds = function() {
      this.el.transition({
        "marginLeft": 6
      });
      this.selectedGroup = null;
      return this.selectedBet = null;
    };

    Game.prototype.toGroups = function() {
      return this.el.transition({
        "marginLeft": -315
      });
    };

    Game.prototype.toAmount = function() {
      return this.el.transition({
        "marginLeft": -635
      });
    };

    Game.prototype.toString = function() {
      return "Game #" + this.id + " | " + this.name + " | " + this.date;
    };

    return Game;

  }).call(this);

}).call(this);
